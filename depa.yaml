openapi: 3.0.1
info:
  title: DEPA
  description: DEPA API specs. 
  version: 2.0.0
externalDocs:
  description: Find out more about Depa 2.0
  url: https://www.google.com/search?q=depa
servers:
- url: https://host:2020/cm/depa/v2
  description: CM APIs location
- url: https://host:2020/dc/depa/v2
  description: DC APIs location
- url: https://host:2020/dp/depa/v2
  description: DP APIs location
tags:
- name: Consent Manager (CM)
  description: Endpoints which an Consent manager needs to impliment
- name: Data Provider (DP)
  description: Endpoints which need to be implimented by an Data provider
- name: Data Consumer (DC)
  description: Endpoint listing for the data consumer


paths:

  # /dp/{id}:
  #   get:
  #     tags:
  #     - Gateway
  #     summary: Get the data provider by id.
  #     description: Get the data provider by id.
  #     parameters:
  #       - name : id
  #         in : path
  #         required: true
  #         schema:
  #           type: string
  #     responses:
  #       200:
  #         description: ok
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/SearchResponse'
  #       401:
  #         description: Authorization information is missing or invalid.
  #     security:
  #     - api_key: []
          
  # /dp/tags:
  #   get:
  #     tags:
  #     - Gateway
  #     summary: Get the list of tags.
  #     description: get the list of tags using which the gateway has done the tagging of the data providers. This will enable to do the filtering while searching of the data providers.
  #     responses:
  #       200:
  #         description: ok
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 type: object
  #                 properties:
  #                   tag:
  #                     type: string
  #                     description: list of gateways this entity is on
  #                   description:
  #                     type: string
  #                     description: description of the tag. some example of tags - #bank , #hospital , #pharmacy etc ...
  #     security:
  #     - api_key: []
      
  # /dp:
  #   get:
  #     tags:
  #     - Gateway
  #     summary: find the data provider on the gateway
  #     description: lookup the entity by name/type on the gateway
  #     parameters:
  #       - name: id
  #         in: query
  #         description: id of the data provider.
  #         schema:
  #           type: string
  #       - name: name
  #         in: query
  #         description: name of the entity.
  #         schema:
  #           type: string
  #       - name: fuzzy_matching
  #         in: query
  #         description: should do the fuzzy matching of the name or not.
  #         schema:
  #           type: boolean
  #       - name: tags
  #         in: query
  #         description: comma seperated tags for filtering.
  #         schema:
  #           type: string
  #       - name: lat-long
  #         in: query
  #         description: user location in the format latitude,longitude.
  #         schema:
  #           type: string
  #       - name: radius
  #         in: query
  #         description: radius in km. to be used with lat-long parameter.
  #         schema:
  #           type: string
  #       - name: limit
  #         in: query
  #         required: true
  #         description: no of records to be fetched.
  #         schema:
  #           type: integer
  #       - name: page
  #         in: query
  #         required: true
  #         description: page number to be fetched. Acts as an offset.
  #         schema:
  #           type: integer
  #     responses:
  #       200:
  #         description: ok
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: '#/components/schemas/SearchResponse'
  #     security:
  #     - api_key: []

  # /pk/sig:
  #   get:
  #     tags:
  #     - Gateway
  #     summary: Get public key for signature verification.
  #     description: Get public key for signature verification.
  #     parameters:
  #       - name: entity-id
  #         in: query
  #         description: id of the entity assigned by the gateway.
  #         schema:
  #           type: string
  #       - name: kid
  #         in: query
  #         description: key id.
  #         schema:
  #           type: string
  #     responses:
  #       200:
  #         description: ok
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #     security:
  #     - api_key: []

  # /pk/comm:
  #   get:
  #     tags:
  #     - Gateway
  #     summary: Get public key for mTLS.
  #     description: Get public key for mTLS.
  #     parameters:
  #       - name: entity-id
  #         in: query
  #         description: id of the entity assigned by the gateway.
  #         schema:
  #           type: string
  #       - name: kid
  #         in: query
  #         description: key id.
  #         schema:
  #           type: string
  #     responses:
  #       200:
  #         description: ok
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #     security:
  #     - api_key: []

  # /heartbeat:
  #   get:
  #     tags:
  #     - Data Provider (DP)
  #     - Data Consumer (DC)
  #     - Consent Manager (CM)
  #     summary: Get heartbeat.
  #     description: get heartbeat from the entity.
  #     responses:
  #       200:
  #         description: ok
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 time:
  #                   type: string
  #                   format: date-time
  #                 entity:
  #                   type: object
  #                   allOf:
  #                   - $ref: '#/components/schemas/Entity'
  #                   properties:
  #                     gatewayList:
  #                       type: array
  #                       description: list of gateways this entity is on
  #                       items:
  #                         type: string
  #                     serviceEnpoint:
  #                       type: string
  #                       format: url
  #                       description: the url where the service is hosted.
  #                 status:
  #                   type: string
  #                   description: tell the status of the service to the gateway. Example UP, DOWN
  #     security:
  #     - api_key: []
      
  /consent-requests/is-supported:
    post:
      tags:
      - Data Provider (DP)
      # - Gateway
      summary: Check if the consent-request can be fulfilled by the DP
      description: CM to check if the consent request placed by the DC is supported by the DP selected by the user
      # parameters:
      #   - $ref:  '#/components/parameters/GatewayHeader'
      requestBody:
        content:
            application/json:
              schema:
                type: object
                properties:
                  consentRequests:
                    type: array
                    items:
                      allOf:
                       - $ref: '#/components/schemas/Artifact'
                       - $ref: '#/components/schemas/ConsentRequestArtifact'
        required: true
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  supported:
                    type: array
                    items:
                      type: object
                      properties:
                        consentRequestId:
                          type: string
                        contentType:
                          type: string
                  notSupported:
                    type: array
                    items:
                      type: object
                      properties:
                        consentRequestId:
                          type: string
      security:
      - api_key: []
      
      
  /consent-requests/{consentRequestIds}:
    get:
      tags:
      - Consent Manager (CM)
      # - Gateway
      summary: Check the status of the consent request.
      description: DC can check the status of the consent requests.
      parameters:
        # - $ref:  '#/components/parameters/GatewayHeader'
        - name: consentRequestIds
          in: path
          description: comma seperated list of consent request ids.
          required: true
          schema:
            type: string
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    consentRequestId:
                      type: string
                    status:
                      type: string
                      enum:
                        - GRANTED
                        - DENIED
                        - EXPIRED
                        - USER_ACTION_AWAITED
                        - REVOKED
                        - PAUSED
                        - RESUMED
      security:
      - api_key: []
      
     
  /consent-requests:
    post:
      tags:
      - Consent Manager (CM)
      # - Gateway
      summary: Post the consent-request.
      description: Used by the DC to post the consent request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              oneOf:
              - $ref: '#/components/schemas/NewConsentRequest_1.0'
        required: true
      responses:
        204:
          description: no content
      security:
      - api_key: []
      
  /consent:
    post:
      tags:
      - Data Provider (DP)
      - Data Consumer (DC)
      # - Gateway
      summary: Post consent artifact
      description: provide the consent artifact to the DP and DC. CM can either grant or deny the consent.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              oneOf:
              - $ref: '#/components/schemas/GrantedConsentRequest_1.0'
              - $ref: '#/components/schemas/DeniedConsentRequest_1.0'
        required: true
      responses:
        204:
         description: no content
      security:
      - api_key: []
      
    put:
      tags:
      - Data Provider (DP)
      - Data Consumer (DC)
      # - Gateway
      summary: update the consent artifact.
      description: update by either revoking, pausing or resumeing the consent.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              oneOf:
              - $ref: '#/components/schemas/RevokeConsentRequest_1.0'
              - $ref: '#/components/schemas/PauseConsentRequest_1.0'
              - $ref: '#/components/schemas/ResumeConsentRequest_1.0'
        required: true
      responses:
        204:
         description: no content
      security:
      - api_key: []
     
  /notification/data:
    post:
      tags:
      - Consent Manager (CM)
      - Data Consumer (DC)
      # - Gateway
      summary: Provide data related notifications
      description: notifications for entities when data is exchanged.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              oneOf:
              - $ref: '#/components/schemas/PrepareDataNotification_1.0'
              - $ref: '#/components/schemas/DataReadyNotification_1.0'
              - $ref: '#/components/schemas/DataTxNotification_1.0'
              - $ref: '#/components/schemas/DataRxNotification_1.0'
        required: true
      responses:
        204:
          description: no content
      security:
      - api_key: []
      
  /dynamic-data-fetch-url:
    get:
      tags:
      - Data Provider (DP)
      summary: Fetch data
      description: Fetch the requested data.
      parameters:
          - in: query
            name: partNo
            description: if the data is provided in parts then correct part no to be specified. part numbers begin with 1.
            schema:
              type: integer
            required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  contentType:
                    type: string
                  multiPart:
                    type: boolean
                  partNo:
                    type: number
                  totalParts:
                    type: number
                  totalSizeInBytes:
                    type: integer
                  partSizeInBytes:
                    type: integer
                  data:
                    type: string
        550:
          description: Consent expired.
        551:
          description: Consent revoked.
        552:
          description: Consent paused.
      
  /notification/error:
    post:
      tags:
      # - Gateway
      - Data Provider (DP)
      - Consent Manager (CM)
      - Data Consumer (DC)
      summary: notify on error condition.
      description: post the error details in relation to the request which happend before.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              allOf:
              - $ref: '#/components/schemas/ErrorNotification_1.0'
        required: true
      responses:
        204:
          description: no content
      security:
      - api_key: []
      
  # /notification/ack:
  #   post:
  #     tags:
  #     - Gateway
  #     - Data Provider (DP)
  #     - Consent Manager (CM)
  #     - Data Consumer (DC)
  #     summary: notify an acknowledgement.
  #     description: post acknowledgement to the request.
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             allOf:
  #             - $ref: '#/components/schemas/AckNotification_1.0'
  #       required: true
  #     responses:
  #       204:
  #         description: no content
  #     security:
  #     - api_key: []
                
                
  /notification/link:
    post:
      tags:
      - Consent Manager (CM)
      - Data Provider (DP)
      # - Gateway
      summary: Recieve account linking notifications
      description: Linking can be initiated from the DP or the CM side. In both the cases one will act as a client and other the server for this endpoint.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              oneOf:
              - $ref: '#/components/schemas/LinkingSuccessNotification_1.0'
        required: true
      responses:
        204:
          description: no content
      security:
      - api_key: []
      
  /link:
    post:
      tags:
      - Consent Manager (CM)
      - Data Provider (DP)
      # - Gateway
      summary: Request for account linking.
      description: Linking can be initiated from the DP or the CM side. In both the cases one will act as a client and other the server for this endpoint.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              oneOf:
              - $ref: '#/components/schemas/LinkAccountRequest_1.0'
        required: true
      responses:
        204:
          description: no content
      security:
      - api_key: []
  
    delete:
      tags:
      - Consent Manager (CM)
      - Data Provider (DP)
      # - Gateway
      summary: Forget account link.
      description: User can choose to de-link the account. Can be initiated from the CM or the DP.
      parameters:
        - name: linkingToken
          in: query
          description: token to identify the account to delink. For multiple account de-linking multiple such requests will have to be made.
          schema:
            type: string
          required: true
      responses:
        204:
          description: no content
      security:
      - api_key: []
                

#--------------- SCHEMA DEFINITIONS -----------
components:
  schemas:
  
    Entity:
      type: object
      required:
        - id
        - name
      properties:
        id:
          description : id assigned by the gateway to uniquely identify the entity. Each gateway can have its own id assigned to a same entity.
          type: string
        name:
          type: string
        domain:
          type: string
        website:
          type: string
  
    Account:
      type: object
      required:
        - id
        - type
        - description
      description: refered to the arrangement with the service provider from which the data can be provided. Like savings a/c, FD, mobileNumber/landlineNumer with the telecom provider, account with the diagnositcs lab, records held in the account with doctor.
      properties:
        id:
          type: string
          description: identifier of the account. This need not be the actual account no (like saving bank ac, folio number etc..), but can be an id which maps to the original account.
        alias:
          type: string
          description: the alias of the account which the user recognizes. It can be masked account number in case of financial accounts, or some alias which will help user to recognize the account.
        type:
          description: what kind of account this is. Completely DP defined. Like a savings bank account etc...
          type: string
        description:
          description: description of the above type.
          type: string
        otherDetails:
          description: any details which DP might want to store in a key-value form. This will be shared back when as is in future requests/notification.
          type: array
          items:
            $ref: '#/components/schemas/KeyValuePair'


    Artifact:
      type: object
      required:
        - id
        - schemaVersion
        - time
        - expiryTime
        - signature
      properties:
        id:
          type: string
          description: id of the artifact
        schemaVersion:
          type: string
          description: type of artifact
        time:
          type: string
          format: date-time
          description: time of artifact generation
        expiryTime:
          type: string
          format: date-time
          description: time of artifact expiration
        # by:
        #   type: object
        #   description: by whom this artifact is created by
        #   allOf:
        #     - $ref: '#/components/schemas/Entity'
        # for:
        #   type: array
        #   description: for whom this artifact is intended for.
        #   items:
        #     allOf:
        #       - $ref: '#/components/schemas/Entity'
        signature:
          type: string
          description: Digital signature in JWS format Base64 encoded


    ConsentRequestArtifact:
      type: object
      required:
        - user
        - dataType
        - permission
        - purpose
      # allOf:
      #   - $ref: '#/components/schemas/Artifact'
      properties:
        user:
          type: string
          format: email
          description: consent manager id of the user who initiated the request.
          
        additionalParms:
          description: additional parameters which can be added by the DC. Can used for grouping of asks, recording service id etc..
          type: array
          items:
            $ref: '#/components/schemas/KeyValuePair'
        dataType:
              description: defines the kind of data which is requested. like account statement, doctors prescription etc... There will a list of TYPES which will be available for a domain.
              type: array
              items:
                type: string
        permission:
          type: object
          required:
            - dateRange
            - frequency
            - dataEraseAt
          properties:
            # accessMode:
            #   type: string
            #   enum: [VIEW, STORE, QUERY, STREAM]
            dateRange:
              type: object
              required:
                - from
                - to
              properties:
                from:
                  type: string
                  format: date-time
                to:
                  type: string
                  format: date-time
            frequency:
              type: string
              description: freq at which data is required. This will be in the form of cron expression. Example - "0 0 0 5,15 * ? *" which says At 00:00:00am, on the 5th and 15th day, every month
            dataEraseAt:
              description: an aproximate date given by the DC that when the requested data will be removed from his platform.
              type: string
              format: date-time
              # allOf:
              # - $ref: '#/components/schemas/TimeUnit'
        # requestedDataType:
        #   type: object
        #   allOf:
        #     - $ref: '#/components/schemas/dataType'
        purpose:
          type: object
          description: defines the purpose for which this data is requested.
          required:
            - text
            - code
            - refUri
          properties:
            text:
              type: string
            code:
              type: string
              description: 'From the fixed set, documented at refUri'
            refUri:
              type: string
              format: uri
      
    ConsentArtifact:
      type: object
      required:
        - user
        - consentDetails
        - accounts
      allOf:
        - $ref: '#/components/schemas/Artifact'
      properties:
        user:
          type: string
          format: email
          description: user who is giving the consent.identified by the consent managers id.
        relationshipProof:
          description: a token which user possess as the proof of bieng guardian/nominee of another user. This will only be provided if the user is playing a role of guardian/nominee. If not provided DP will not honour the consent and will throw error.
          type: string
        consentDetails:
          type: object
          properties:
            id:
              type: string
              description: id of the consent request
            schemaVersion:
              type: string
              description: version of artifact.
            time:
              type: string
              format: date-time
              description: time of consent request.
          allOf:
           - $ref: '#/components/schemas/ConsentRequestArtifact'
        accounts:
          description: An array of account linking tokens. Used to identify accounts using which the data need to be shared. A user can link multiple accounts but may choose to share data from few.
          type: array
          items:
            type: string
        
    # TimeUnit:
    #   type: object
    #   required:
    #     - unit
    #     - value
    #   properties:
    #     unit:
    #       type: string
    #       description: A unit of time
    #       enum:
    #         - HR
    #         - DAY
    #         - WEEK
    #         - MONTH
    #         - YEAR
    #     value:
    #       type: number
          
    KeyValuePair:
      type: object
      required:
        - key
        - value
      properties:
        key:
          type: string
        value:
          type: string
      
    # dataType:
    #       type: object
    #       properties: 
    #         contentType:
    #           type: array
    #           description: The data types which are supported by the DC for consumption of data. This will of the format as defined in https://tools.ietf.org/html/rfc7231#section-3.1.1.5 Example - text/plain or application/json or image/png
    #           items:
    #             type: string
    #         multi-part:
    #           type: boolean
    
    Request:
      type: object
      required:
        - reqId
        - reqType
        - time
        - src
        - dest
      properties:
        reqId:
          type: string
          description: unique id of the request
        reqType:
          type: string
          description: type of request like GrantedConsentRequest_1.0, NewConsentRequest_1.0 etc..
        time:
          type: string
          format: date-time
          description: time of request
        src:
          type: string
          description: id of the entity from where this request originated.
        dest:
          description: ids of the entity for whom this request is for.
          type: array
          items:
            type: string
        #requestHeaders:
        #  type: object
        #  description: key-value pairs for additional properties.
      discriminator:
        propertyName: type
        
    Notification:
      type: object
      required:
        - notificationId
        - notificationType
        - time
        - src
        - dest
      properties:
        notificationId:
          type: string
          description: unique id of the request
        notificationType:
          type: string
          description: type of request like ErrorNotification_1.0 etc..
        time:
          type: string
          format: date-time
          description: time of notification
        src:
          type: string
          description: id of the entity from where this request originated.
        dest:
          description: ids of the entity for whom this request is for.
          type: array
          items:
            type: string
      discriminator:
        propertyName: type
        
    ErrorNotification_1.0:
      description: A error notification to inform about the error conditions to the entity from where the request originated.
      type: object
      required:
        - refRequestId
        - refRequestType
        - errorCode
        - errorMsg
      allOf:
      - $ref: '#/components/schemas/Notification'
      properties:
        refRequestId:
          description: reference request id against which this error is reported.
          type: string
        refRequestType:
          description: the name of the request type along with version. For example - GrantConsent_1.0
          type: string
        errorCode:
          description: error code
          type: string
        errorMsg:
          description: description of the error.
          type: string
          # Sample error codes and messages
          # 301 - msg delivery failed.
          # 302 - request not supported.
          
          # 4XX - for consent request related erorrs
          # 400 - schema version not supported
          # 401 - stale request
          # 402 - signature validation failed.
          # 403 - user doesn't exists or is inactive
          # 404 - unknown data type
          
          # 5XX - for consent related erorrs
          # 501 - consent schema version not supported
          # 502 - consent id not present.
          # 503 - consent signature validation failed.
          # 504 - data type not supported
          
          # 9XX - for data related errors
          # 901 - data not available
          # 902 - consent doesn't exists or is paused.

          
    AckNotification_1.0:
      description: An acknowledgement for recieving the original request.
      type: object
      required:
        - refRequestId
        - refRequestType
      allOf:
      - $ref: '#/components/schemas/Notification'
      properties:
        refRequestId:
          description: reference request id for which this acknowlegement is.
          type: string
        refRequestType:
          description: the name of the request type along with version. For example - GrantConsent_1.0
          type: string

    LinkAccountRequest_1.0:
      type: object
      required:
        - userId
      allOf:
      - $ref: '#/components/schemas/Request'
      properties:
        userId:
          description : property to inform the recieving party about the user who needs to be authenticated to do the linking. A DP can provide the cm-id of the user to be recognozed on the CM's platform, while a CM can capture the user-id which can be a mobile no,  email address or any other custom id using which the user is uniquely identified on the DPs platform.
          type: string
        accounts:
          description: required only in case the linking is initiated from DP.
          type: array
          items:
            $ref: '#/components/schemas/Account'
            
    LinkingSuccessNotification_1.0:
      type: object
      required:
        - accountsLinked
      allOf:
      - $ref: '#/components/schemas/Notification'
      properties:
        accountsLinked:
          type: array
          items:
            required:
              - linkingToken
            allOf:
            - $ref: '#/components/schemas/Account'
            properties:
              linkingToken:
                description: a token issued by the DP to CM for a user as the proof of linking account.
                type: string
        relationshipProof:
          description: a token issued by the DP to CM for a user as the proof of bieng a guardian/nominee of another user. This will only be provided if guardian/nominee is linking the account with their CM account.
          type: string
            
    NewConsentRequest_1.0:
      type: object
      required:
        - consentRequests
      allOf:
      - $ref: '#/components/schemas/Request'
      properties:
        consentRequests:
          type: array
          items:
            allOf:
            - $ref: '#/components/schemas/Artifact'
            - $ref: '#/components/schemas/ConsentRequestArtifact'
      
    GrantedConsentRequest_1.0:
      type: object
      required:
        - consentArtifacts
      allOf:
      - $ref: '#/components/schemas/Request'
      properties:
        consentArtifacts:
          type: array
          items:
            allOf:
            - $ref: '#/components/schemas/ConsentArtifact'

    DeniedConsentRequest_1.0:
      type: object
      required:
        - consentRequestIds
      allOf:
      - $ref: '#/components/schemas/Request'
      properties:
        consentRequestIds:
          type: array
          description: ids of the consent request artifacts against which consent is denied by the user.
          items:
            required:
              - consentRequestId
            type: object
            properties:
              consentRequestId:
                type: string
              denialReason:
                type: string
    
    RevokeConsentRequest_1.0:
      type: object
      required:
        - consentIds
      allOf:
      - $ref: '#/components/schemas/Request'
      properties:
        consentIds:
          type: array
          description: ids of the consent artifacts which are revoked.
          items:
            required:
              - consentId
            type: object
            properties:
              consentId:
                type: string
              revokeReason:
                description: text dexcription on why this is revoked.
                type: string
            
    PauseConsentRequest_1.0:
      type: object
      required:
        - consentArtifactIds
      allOf:
      - $ref: '#/components/schemas/Request'
      properties:
        consentArtifactIds:
          type: array
          items:
            required:
              - consentId
              - pauseTill
            properties:
              consentId:
                type: string
                description: ids of the consent artifacts which are paused.
              pauseReason:
                type: string
              pauseTill:
                type: string
                description: If not provided consent will resume when a resume event is recieved else resume after the given time.
                format: date-time
            
    ResumeConsentRequest_1.0:
      type: object
      required:
        - consentArtifactIds
      allOf:
      - $ref: '#/components/schemas/Request'
      properties:
        consentArtifactIds:
          type: array
          description: ids of the consent artifacts which are resumed.
          items:
            type: string
            
    PrepareDataNotification_1.0:
      description: A notification from DC to DP that he can now start preparing the data.
      type: object
      required:
        - consentId
        - publicKeyDetails
      allOf:
      - $ref: '#/components/schemas/Notification'
      properties:
        consentId:
          type: string
        publicKeyDetails:
          description: base64 encoded value of the JWK. As  per rfc7517
        # // why not use the JWK format to define the key Details ??
        #   type: object
        #   required:
        #     - cryptoAlg
        #     - curve
        #     - dhPublicKey
        #     - nonce
        #   properties:
        #     cryptoAlg:
        #       type: string
        #       format: string
        #       example: ECDH
        #     curve:
        #       type: string
        #       format: string
        #       example: Curve25519
        #     dhPublicKey:
        #       type: object
        #       required:
        #         - expiry
        #         - parameters
        #         - keyValue
        #       properties:
        #         expiry:
        #           type: string
        #           format: date-time
        #         parameters:
        #           type: string
        #           format: string
        #           example: Curve25519/32byte random key
        #         keyValue:
        #           type: string
        #           format: string
        #     nonce: ??
        #       type: string
        #       format: 32 byte string
        #       example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
    
    DataReadyNotification_1.0:
      description: A notification from DP to DC that data is ready to be fetched.
      type: object
      required:
        - consentId
        - sessionKey
        - accessToken
        - url
        - contentType
        - multiPart
        - totalParts
        - totalSizeInBytes
      allOf:
      - $ref: '#/components/schemas/Notification'
      properties:
        consentId:
          type: string
        # sessionKey:
        #   description: session key using which the accesstoken and url are encrypted. The session key is itself encrypted with the prulic key shared by the DC in prepare notification. This is base64 encoded value of the JWK. As  per rfc7517
        #   type: string
        accessToken:
          type: string
          description: base64 encoding of encrypted JWT token.
        # url:
        #   type: string
        #   description: Dynamic URI generated by the DP from where the data can be fetched. This is encrypted by the session key.
        contentType:
          type: string
          description: content type of the data which will be available from the endpoint.
        multiPart:
          type: boolean
        totalParts:
          type: integer
        totalSizeInBytes:
          type: integer
          
    DataTxNotification_1.0:
      type: object
      required:
        - cycle
        - txState
      allOf:
      - $ref: '#/components/schemas/Notification'
      properties:
        cycle:
          description: When data transfer need to happen on a defined frequency then this parameter tells the state of each cycle.
          type: integer
        txState:
          type: string
          description: State of transmission
          enum:
            - STARTED
            - COMPLETED
            - ELAPSED
      
    DataRxNotification_1.0:
      type: object
      required:
        - cycle
        - txState
      allOf:
      - $ref: '#/components/schemas/Notification'
      properties:
        cycle:
          description: When data transfer need to happen on a defined frequency then this parameter tells the state of each cycle.
          type: integer
        txState:
          type: string
          description: State of transmission
          enum:
            - TRIGGERED
            - COMPLETED
            - IN_PROGRESS
          
    SearchResponse:
      type: object
      required:
        - tags
        - userIdentifierType
      allOf:
      - $ref: '#/components/schemas/Entity'
      properties:
        tags:
          type: array
          description: list of tags
          items:
            type: string
        userIdentifierType:
          type: string
          description: A user is identified by what kind of ID. This will be required when the request is initiated from the CM for linking DP. For now values for this can be MOBILE, E-MAIL, CUSTOM-ID, UPI-ID . More support to be added in future. This field will tell CM on what kind of value needs to be captured from the user.
        gatewayList:
          type: array
          description: list of gateways this entity is on
          items:
            type: string
        address:
          type: object
          properties:
            firstLine:
              type: string
            secondLine:
              type: string
            thirdLine:
              type: string
            pin:
              type: integer
            state:
              type: string
            country:
              type: string
        

#---------- SECURITY SCHEMES ------------
  securitySchemes:
    api_key:
      type: apiKey
      description: A key in the form of JWT shared by the gateeway with the entity at the time of regestration. 
      name: api_key
      in: header

  responses:
    '200':
      description: OK
      headers:
        X-Rate-Limit:
          description: calls per hour allowed by the user
          schema:
            type: integer
            format: int32
        X-Expires-After:
          description: date in UTC when token expires
          schema:
            type: string
            format: date-time
    '400':
      description: Bad request.
    '401':
      description: Authorization information is missing or invalid.
    '404':
      description: Not found.
    '5XX':
      description: Unexpected error.
      
# security:
# - api_key: []

      
